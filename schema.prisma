generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Page {
  id           String   @id @default(cuid())
  name         String   @unique
  route        String   @unique
  isPublic     Boolean  @default(false)
  imageLink    String?
  customizable Boolean  @default(false)
  roles        Role[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique
  pages     Page[]
  icon      String?
  users     User[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  resultadosUtilidades ResultadosUtilidades[]
  entreprises          Enterprise[]
  deleted              Boolean                @default(false)
  enabled              Boolean                @default(true)
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  name                 String?
  roles                Role[]
  accounts             Account[]
  sessions             Session[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Profile              Profile?
}

model Profile {
  id           String             @id @default(cuid())
  imageUrl     String?
  documentType Enum_Document_Type
  document     String
  address      String?
  phone        String?
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String             @unique
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Carry {
  id                String         @id @default(cuid())
  utilidadFiscal    Decimal        @db.Money
  utilidadComercial Decimal        @db.Money
  utilidadGravada   Decimal        @db.Money
  utilidadNoGravada Decimal        @db.Money
  year              DateTime
  sobrante          Boolean
  resultado         Decimal        @db.Money
  restante          Decimal        @db.Money
  ejecutado         Boolean
  enterprise        Enterprise?    @relation(fields: [enterpriseId], references: [id])
  enterpriseId      String?
  historicoCarry    HistoricoCarry @relation(fields: [historicoCarryId], references: [id])
  historicoCarryId  String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model HistoricoCarry {
  id                   String                 @id @default(cuid())
  resultadosUtilidades ResultadosUtilidades[]
  valorActual          Decimal?               @db.Money
  ultimoAnoCalculado   DateTime?
  enterprise           Enterprise?            @relation(fields: [enterpriseId], references: [id])
  enterpriseId         String?                @unique
  carry                Carry[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model Enterprise {
  id                  String                 @id @default(cuid())
  GrupoUtilidades     GrupoUtilidades[]
  resultadoUtilidades ResultadosUtilidades[]
  documentType        Enum_Document_Type?
  documentNumber      String
  ciiuCodes           String[]
  legalName           String
  phoneNumber         String
  email               String
  address             String?
  city                City?                  @relation(name: "CitytoEnterprise", fields: [cityId], references: [id])
  cityId              String?
  users               User[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  carry               Carry[]
  historicoCarry      HistoricoCarry?
}

model State {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  cities    City[]   @relation(name: "CityToState")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id         String       @id @default(cuid())
  code       String       @unique
  name       String
  state      State        @relation(name: "CityToState", fields: [stateId], references: [id])
  stateId    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Enterprise Enterprise[] @relation(name: "CitytoEnterprise")
}

model DataOrigin {
  id               String             @id @default(cuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  DocumentLocation DocumentLocation[] @relation(name: "DocumentLocation")
}

model DocumentLocation {
  id           String     @id @default(cuid())
  year         Year       @relation(fields: [yearId], references: [id])
  yearId       String
  value        String
  dataOrigin   DataOrigin @relation(name: "DocumentLocation", fields: [dataOriginId], references: [id])
  dataOriginId String
  variable     Variable   @relation(name: "Variable", fields: [variableId], references: [id])
  variableId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Variable {
  id                 String             @id @default(cuid())
  name               String
  alias              String
  documentsLocations DocumentLocation[] @relation(name: "Variable")
  formulas           Formula[]          @relation(name: "Formula")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Formula {
  id                   String                 @id @default(cuid())
  resultadosUtilidades ResultadosUtilidades[]
  years                Year[]                 @relation(name: "Year")
  variable             Variable[]             @relation(name: "Formula")
  formula              String
  name                 String?
  description          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model Year {
  id               String             @id @default(cuid())
  year             DateTime           @unique
  formula          Formula            @relation(name: "Year", fields: [formulaId], references: [id])
  formulaId        String
  documentLocation DocumentLocation[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model ResultadosUtilidades {
  id                  String               @id @default(cuid())
  year                DateTime
  isRegimenSimple     Boolean
  formula             Formula              @relation(fields: [formulaId], references: [id])
  formulaId           String
  version             Int
  pdfUrl              String?
  utilidadFiscal      Decimal              @db.Money
  utilidadComercial   Decimal              @db.Money
  ajustesPositivos    Decimal              @db.Money
  ajustesNegativos    Decimal              @db.Money
  trasladoOri         Decimal              @db.Money
  utilidadComerDAjust Decimal              @db.Money
  utilidadGravada     Decimal              @db.Money
  utilidadNoGravada   Decimal              @db.Money
  fuenteResultado     Enum_FuenteResultado
  user                User                 @relation(fields: [userId], references: [id])
  userId              String
  enterpise           Enterprise?          @relation(fields: [enterpriseId], references: [id])
  enterpriseId        String?
  grupoUtilidades     GrupoUtilidades?     @relation(fields: [grupoUtilidadesId], references: [id])
  grupoUtilidadesId   String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  historicoCarry      HistoricoCarry?      @relation(fields: [historicoCarryId], references: [id])
  historicoCarryId    String?
}

model GrupoUtilidades {
  id                   String                 @id @default(cuid())
  consecutive          Int                    @default(autoincrement())
  name                 String
  year                 DateTime
  resultadosUtilidades ResultadosUtilidades[]
  enterprise           Enterprise             @relation(fields: [enterpriseId], references: [id])
  enterpriseId         String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

enum Enum_RoleName {
  Admin
  Contabler
  Client
}

enum Enum_Document_Type {
  Nit
  Cedula               @map("Cédula Ciudadania")
  Cedula_Extranjeria   @map("Cédula Extranjería")
  Tarjeta_Identidad    @map("Tarjeta de Identidad")
  Pasaporte
  Sucesion_liquida     @map("Sucesión Líquida")
  Certificado_Sucesion @map("Certificado de Sucesión Líquida")
  Extranjero_Dian      @map("Extranjero Asignado por DIAN")
  Registor_Civil       @map("Registro Civil")
  Menores_Cuantias     @map("Menores de Cuantías y/o consecutivo exterior")
  Extranjero_Juridica  @map("Extranjero persona jurídica")
  Carnet_Diplomatico   @map("Carnet Diplomático")
  Permiso_Especial     @map("Permiso Especial de permanencia")
  NUIP
  Tajerta_Extranjeria  @map("Tarjeta de Extranjería")
  Consecutivo_interno  @map("Consecutivo Interno")
  Codigo_fiscal        @map("Código Fiscal")
  Persona_natural_rut  @map("Persona Natural con Rut")
}

enum Enum_FuenteResultado {
  SISBLER
  Renta
  Manual
}
